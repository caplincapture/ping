var searchIndex = JSON.parse('{\
"memoffset":{"doc":"A crate used for calculating offsets of struct members and …","t":"OOOOOOO","n":["offset_of","offset_of_tuple","offset_of_union","raw_field","raw_field_tuple","raw_field_union","span_of"],"q":[[0,"memoffset"]],"d":["Calculates the offset of the specified field from the …","Calculates the offset of the specified field from the …","Calculates the offset of the specified union member from …","Computes a const raw pointer to the given field of the …","Computes a const raw pointer to the given field of the …","Computes a const raw pointer to the given field of the …","Produces a range instance representing the sub-slice …"],"i":[0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0],"c":[],"p":[]},\
"pretty_hex":{"doc":"A Rust library providing pretty hex dump.","t":"DDIMLLLLMLLFLLLLLLMKKFLLMFFLFFMLLLLLLLLM","n":["Hex","HexConfig","PrettyHex","ascii","borrow","borrow","borrow_mut","borrow_mut","chunk","clone","clone_into","config_hex","default","fmt","fmt","fmt","from","from","group","hex_conf","hex_dump","hex_write","into","into","max_bytes","pretty_hex","pretty_hex_write","simple","simple_hex","simple_hex_write","title","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","width"],"q":[[0,"pretty_hex"]],"d":["Reference wrapper for use in arguments formatting.","Configuration parameters for hexdump.","Allows generates hex dumps to a formatter.","Append ASCII representation column.","","","","","Source bytes per chunk (word). 0 for single word.","","","Return a hexdump of <code>source</code> in specified format.","","Formats the value by <code>pretty_hex_write</code> using the given …","Formats the value by <code>simple_hex_write</code> using the given …","","Returns the argument unchanged.","Returns the argument unchanged.","Chunks count per group. 0 for single group (column).","Wrap self reference for use in <code>std::fmt::Display</code> and …","Wrap self reference for use in <code>std::fmt::Display</code> and …","Write hex dump in specified format.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Maximum bytes to print.","Return a multi-line hexdump in default format complete …","Write multi-line hexdump in default format complete with …","Returns configuration for <code>simple_hex</code>, <code>simple_hex_write</code> and …","Returns a one-line hexdump of <code>source</code> grouped in default …","Dump <code>source</code> as hex octets in default format without header …","Write first line header with data length.","","","","","","","","","Source bytes per row. 0 for single row without address …"],"i":[0,0,0,1,5,1,5,1,1,1,1,0,1,5,5,1,5,1,1,11,11,0,5,1,1,0,0,1,0,0,1,1,5,5,1,5,1,5,1,1],"f":[0,0,0,0,[[]],[[]],[[]],[[]],0,[1,1],[[]],[[2,1],3],[[],1],[[[5,[[0,[2,4]]]],6],7],[[[5,[[0,[2,4]]]],6],7],[[1,6],7],[[]],[[]],0,[1,5],[[],5],[[8,[0,[2,4]],1],7],[[]],[[]],0,[2,3],[[8,2],7],[[],1],[2,3],[[8,2],7],0,[[]],[[],3],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],0],"c":[],"p":[[3,"HexConfig"],[8,"AsRef"],[3,"String"],[8,"Sized"],[3,"Hex"],[3,"Formatter"],[6,"Result"],[8,"Write"],[4,"Result"],[3,"TypeId"],[8,"PrettyHex"]]},\
"sup":{"doc":"","t":"GDGGDLLLLMLLLLLFMMMLLLLMLL","n":["Handle","IPAddr","IcmpCreateFile","IcmpSendEcho","IpOptionInformation","borrow","borrow","borrow_mut","borrow_mut","flags","fmt","from","from","into","into","main","options_data","options_size","tos","try_from","try_from","try_into","try_into","ttl","type_id","type_id"],"q":[[0,"sup"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,1,6,1,6,6,1,1,6,1,6,0,6,6,6,1,6,1,6,6,1,6],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],0,[[1,2],3],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],4],[[],4],[[],4],[[],4],0,[[],5],[[],5]],"c":[],"p":[[3,"IPAddr"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[3,"IpOptionInformation"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
